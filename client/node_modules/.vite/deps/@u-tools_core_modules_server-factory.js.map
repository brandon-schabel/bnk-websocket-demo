{
  "version": 3,
  "sources": ["../../../../server/node_modules/@u-tools/core/modules/server-factory/body-parser-middleware.ts", "../../../../server/node_modules/@u-tools/core/modules/server-factory/create-cors-middleware.ts", "../../../../server/node_modules/@u-tools/core/modules/server-factory/create-state-dispatchers.ts", "../../../../server/node_modules/@u-tools/core/modules/server-factory/create-web-socket-state-machine.tsx", "../../../../server/node_modules/@u-tools/core/modules/server-factory/handle-file-upload.ts", "../../../../server/node_modules/@u-tools/core/modules/server-factory/check-file-size-middleware.ts", "../../../../server/node_modules/@u-tools/core/modules/server-factory/server-factory.ts"],
  "sourcesContent": ["import { Middleware } from \"../utils/http-types\";\n\nconst parsedBodies = new WeakMap<Request, any>();\n\nexport const bodyParserMiddleware: Middleware = async (request, next) => {\n  const contentType = request.headers.get(\"Content-Type\");\n  console.log({ contentType });\n\n  if (contentType && contentType.includes(\"application/json\")) {\n    const rawBody = await request.text();\n    try {\n      const parsed = JSON.parse(rawBody);\n      parsedBodies.set(request, parsed);\n    } catch (error) {\n      console.error(\"Failed to parse JSON body:\", error);\n      // Consider returning an error response here, if required\n    }\n  } else {\n    // Handle other content types here\n    parsedBodies.set(request, await request.text());\n  }\n\n  return next();\n};\n\nexport function getParsedBody<T>(request: Request): T {\n  return parsedBodies.get(request) as T;\n}\n", "import { CORSOptions, Middleware } from \"utils/http-types\";\n\nexport const createCorsMiddleware = (\n  options?: Partial<CORSOptions>\n): Middleware => {\n  // Default values\n  const defaultMethods = [\"GET\", \"POST\", \"PUT\", \"DELETE\"];\n  const defaultHeaders = [\"Content-Type\"];\n\n  // Merge default values with provided options\n  let allowedOrigins = options?.allowedOrigins;\n\n  if (options?.allAllOrigins) {\n    allowedOrigins = [\"*\"];\n  }\n\n  const allowedMethods = options?.allowedMethods || defaultMethods;\n  const allowedHeaders = options?.allowedHeaders || defaultHeaders;\n\n  return async (request, next) => {\n    console.log(\"middleware running\");\n    console.log({\n      headers: request.headers,\n      request,\n      options,\n      allowedOrigins,\n    });\n\n    const requestOrigin = request.headers.get(\"Origin\");\n\n    if (!requestOrigin) {\n      console.error(\"Request does not have an Origin header.\");\n      return new Response(\"Bad Request: Missing Origin header.\", {\n        status: 400,\n      });\n    }\n\n    if (\n      !allowedOrigins?.includes(\"*\") &&\n      !allowedOrigins?.includes(requestOrigin)\n    ) {\n      console.error(`Origin ${requestOrigin} is not allowed.`);\n      return new Response(\n        `CORS Error: Origin ${requestOrigin} is not allowed.`,\n        { status: 403 }\n      );\n    }\n\n    if (request.method === \"OPTIONS\") {\n      // Check if the request's method is allowed\n      const requestMethod = request.headers.get(\n        \"Access-Control-Request-Method\"\n      );\n      if (requestMethod && !allowedMethods.includes(requestMethod)) {\n        console.error(`Method ${requestMethod} is not allowed.`);\n        return new Response(\n          `CORS Error: Method ${requestMethod} is not allowed.`,\n          { status: 405 }\n        );\n      }\n\n      let response = new Response(null, { status: 204 }); // 204 No Content\n\n      // Attach the CORS headers\n      response.headers.set(\"Access-Control-Allow-Origin\", requestOrigin);\n      response.headers.set(\n        \"Access-Control-Allow-Methods\",\n        allowedMethods.join(\", \")\n      );\n      response.headers.set(\n        \"Access-Control-Allow-Headers\",\n        allowedHeaders.join(\", \")\n      );\n\n      console.log(response);\n\n      return response;\n    }\n\n    // For non-OPTIONS requests, process as usual\n    const response = await next();\n\n    response.headers.set(\"Access-Control-Allow-Origin\", requestOrigin);\n    response.headers.set(\n      \"Access-Control-Allow-Methods\",\n      allowedMethods.join(\", \")\n    );\n    response.headers.set(\n      \"Access-Control-Allow-Headers\",\n      allowedHeaders.join(\", \")\n    );\n\n    console.log(response);\n\n    return response;\n  };\n};\n", "import type { Dispatchers } from \"./create-web-socket-state-machine\";\n\nfunction isArrayType<T>(input: T | any[]): input is any[] {\n  return Array.isArray(input);\n}\n\nfunction isObjectType(input: any): input is object {\n  return typeof input === \"object\" && input !== null && !Array.isArray(input);\n}\n\nfunction isNumberType(input: any): input is number {\n  return typeof input === \"number\";\n}\n\nfunction createArrayDispatchers<Key, T, Options extends object = {}>(\n  key: Key,\n  state: T[],\n  updateFunction: (key: Key, value: T[], opts?: Options) => void\n) {\n  return {\n    set: (value: T[], opts?: Options) => {\n      updateFunction(key, value, opts);\n    },\n    push: (value: T, opts?: Options) => {\n      const existingState = state || [];\n      const newArr = [...existingState, value];\n      updateFunction(key, newArr, opts);\n    },\n    pop: (opts?: Options) => {\n      const newArr = state.slice(0, -1);\n      updateFunction(key, newArr, opts);\n    },\n    insert: (index: number, value: T, opts?: Options) => {\n      const newArr = [...state];\n      newArr.splice(index, 0, value);\n      updateFunction(key, newArr, opts);\n    },\n  };\n}\n\nfunction isBooleanType(input: any): input is boolean {\n  return typeof input === \"boolean\";\n}\n\nfunction createBooleanDispatchers<Key, Options extends object = {}>(\n  key: Key,\n  state: boolean,\n  updateFunction: (key: Key, value: any, opts?: Options) => void\n) {\n  return {\n    set: (value: boolean, opts?: Options) => {\n      updateFunction(key, value, opts);\n    },\n    toggle: (opts?: Options) => {\n      updateFunction(key, !state, opts);\n    },\n  };\n}\n\nfunction createObjectDispatchers<Key, T, Options extends object = {}>(\n  key: Key,\n  state: T,\n  updateFunction: (key: Key, value: any, opts?: Options) => void\n) {\n  return {\n    set: (value: T, opts?: Options) => {\n      updateFunction(key, value, opts);\n    },\n    update: (value: Partial<T>, opts?: Options) => {\n      const newValue = { ...state, ...value };\n      updateFunction(key, newValue, opts);\n    },\n  };\n}\n\nfunction createNumberDispatchers<Key, Options extends object = {}>(\n  key: Key,\n  state: number,\n  updateFunction: (key: Key, value: any, opts?: Options) => void\n) {\n  return {\n    set: (value: number, opts?: Options) => {\n      updateFunction(key, value, opts);\n    },\n    increment: (amount: number = 1, opts?: Options) => {\n      updateFunction(key, state + amount, opts);\n    },\n    decrement: (amount: number = 1, opts?: Options) => {\n      updateFunction(key, state - amount, opts);\n    },\n  };\n}\n\nfunction createDefaultDispatchers<Key, T, Options extends object = {}>(\n  key: Key,\n  updateFunction: (key: Key, value: any, opts?: Options) => void\n) {\n  return {\n    set: (value: T, opts?: Options) => {\n      updateFunction(key, value, opts);\n    },\n  };\n}\n\nfunction mergeWithDefault<State extends object>(\n  defaultState: State,\n  state: State\n): State {\n  const mergedState: Partial<State> = {};\n  const missingKeys: (keyof State)[] = [];\n\n  for (const key in defaultState) {\n    if (key in state) {\n      mergedState[key] = state[key];\n    } else {\n      mergedState[key] = defaultState[key];\n      missingKeys.push(key);\n    }\n  }\n\n  // Log missing keys\n  if (missingKeys.length > 0) {\n    console.info(\"Missing keys from state:\", missingKeys.join(\", \"));\n  }\n\n  return mergedState as State;\n}\n\nexport function createStateDispatchers<\n  State extends object,\n  UpdateFnOpts extends object = {}\n>({\n  defaultState,\n  state,\n  updateFunction,\n}: {\n  state: State;\n  defaultState: State;\n  updateFunction: (key: keyof State, value: any, opts?: UpdateFnOpts) => void;\n}): Dispatchers<State, UpdateFnOpts> {\n  const mergedState = mergeWithDefault(defaultState, state);\n\n  return (Object.keys(mergedState) as (keyof State)[]).reduce((acc, key) => {\n    const k = key as keyof State;\n    const currentValue = mergedState[k];\n\n    if (isArrayType(currentValue)) {\n      acc[k] = createArrayDispatchers(k, currentValue, updateFunction) as any;\n    } else if (isObjectType(currentValue)) {\n      acc[k] = createObjectDispatchers(k, currentValue, updateFunction) as any;\n    } else if (isNumberType(currentValue)) {\n      acc[k] = createNumberDispatchers(k, currentValue, updateFunction) as any;\n    } else if (isBooleanType(currentValue)) {\n      acc[k] = createBooleanDispatchers(k, currentValue, updateFunction) as any;\n    } else {\n      acc[k] = createDefaultDispatchers(k, updateFunction) as any;\n    }\n\n    return acc;\n  }, {} as Dispatchers<State>);\n}\n", "import { ServerWebSocket, WebSocketHandler } from \"bun\";\nimport { createStateDispatchers } from \"./create-state-dispatchers\";\n\nexport type Dispatchers<State extends object, Options extends Object = {}> = {\n  [Key in keyof State]: State[Key] extends (infer T)[]\n    ? {\n        set: (value: State[Key], options?: Options) => void;\n        push: (value: T, options?: Options) => void;\n        pop: (options?: Options) => void;\n        insert: (index: number, value: T, options?: Options) => void;\n      }\n    : State[Key] extends object\n    ? {\n        set: (value: State[Key], options?: Options) => void;\n        update: (value: Partial<State[Key]>, options?: Options) => void;\n      }\n    : State[Key] extends number\n    ? {\n        set: (value: State[Key], options?: Options) => void;\n        increment: (amount?: number, options?: Options) => void;\n        decrement: (amount?: number, options?: Options) => void;\n      }\n    : {\n        set: (value: State[Key], options?: Options) => void;\n      };\n};\n\n// TODO: state updated at timestamps to make sure an old client doesn't corrupt\n// the state datas\nexport const createWSStateMachine = <State extends object>(\n  initialState: State\n) => {\n  type UpdatedStateData<Key extends keyof State> = {\n    key: Key;\n    value: State[Key];\n  };\n\n  const connectedClients = new Set<ServerWebSocket>();\n\n  let currentState: State = initialState;\n\n  const stateChangeCallbacks: {\n    [Key in keyof State]?: Array<(newValue: State[Key]) => void>;\n  } = {};\n\n  function onStateChange<Key extends keyof State>(\n    key: Key,\n    callback: (newValue: State[Key]) => void\n  ) {\n    console.log({\n      key,\n      callback,\n    });\n    if (!stateChangeCallbacks[key]) {\n      stateChangeCallbacks[key] = [];\n    }\n\n    stateChangeCallbacks?.[key]?.push(callback);\n  }\n\n  // Adding WebSocket handlers to the server for state sync\n  const websocketHandler: WebSocketHandler = {\n    open: (ws) => {\n      // Add the newly connected client to the set\n      connectedClients.add(ws);\n    },\n    close: (ws) => {\n      // Remove the client from the set when they disconnect\n      connectedClients.delete(ws);\n    },\n    message: (_ws, msg) => {\n      // Your message handling logic here\n      // This part may be more complex based on your state shape and update requirements\n      // console.log({\n      //   msg,\n      // });\n\n      if (typeof msg !== \"string\") return;\n\n      const data: { key: keyof State; value: State[keyof State] } =\n        JSON.parse(msg);\n      console.log({ data });\n\n      if (data.key in currentState) {\n        updateStateAndDispatch(data.key, data.value);\n      }\n    },\n  };\n\n  // The updater function\n  function updateStateAndDispatch(\n    key: keyof State,\n    updater:\n      | ((currentState: State[keyof State]) => State[keyof State])\n      | State[keyof State]\n  ) {\n    const newValue =\n      typeof updater === \"function\"\n        ? (updater as (currentState: State[keyof State]) => State[keyof State])(\n            currentState[key]\n          )\n        : updater;\n    currentState[key] = newValue;\n\n    stateChangeCallbacks[key]?.forEach((callback) => callback(newValue));\n\n    const updatedStateData: UpdatedStateData<typeof key> = {\n      key: key,\n      value: newValue,\n    };\n\n    console.log({\n      newValue,\n      updatedStateData,\n    });\n\n    for (const client of connectedClients) {\n      client.send(JSON.stringify(updatedStateData));\n    }\n  }\n\n  const dispatchers = createStateDispatchers(\n    {\n      defaultState: initialState,\n      state: currentState,\n      updateFunction: updateStateAndDispatch,\n    }\n    // initialState,\n    // updateStateAndDispatch\n  );\n\n  return {\n    updateStateAndDispatch,\n    websocketHandler,\n    connectedClients,\n    state: currentState,\n    control: dispatchers,\n    onStateChange,\n  };\n};\n", "export async function handleFileUpload({\n  request,\n  path,\n}: {\n  request: Request;\n  path: string;\n}): Promise<string> {\n  const file = Bun.file(path);\n  if ((await file?.exists()) === true) {\n    console.log(\"file already exists\");\n    return path;\n  }\n\n  //   const fileStream = fs.createWriteStream(path);\n  const reader = request?.body?.getReader();\n  file.writer().start;\n  while (true) {\n    // const { done, value } = await reader?.read();\n    const readerData = await reader?.read();\n    if (!readerData) {\n      console.error(\"handleFileUpload\", \"readerData nto found\");\n      break;\n    }\n\n    const { done, value } = readerData;\n\n    if (done) break;\n    file.writer(value);\n    // fileStream.write(value);\n  }\n  file.writer().end;\n  //   fileStream.end();\n  return path; // return the saved file path or some identifier\n}\n", "import { Middleware } from \"utils/http-types\";\n\nexport function checkFileSizeMiddleware(maxSize: number): Middleware {\n  return (request, next) => {\n    if (Number(request.headers.get(\"Content-Length\")) > maxSize) {\n      return new Response(\"File too large\", { status: 413 });\n    }\n    return next();\n  };\n}\n", "import { Server } from \"bun\";\nimport {\n  BaseRouteRequestType,\n  CORSOptions,\n  Middleware,\n  ResponseBodyTypes,\n  RouteHandler,\n  RouteMap,\n  RouteOptions,\n  StartServerOptions,\n} from \"utils/http-types\";\nimport { bodyParserMiddleware, getParsedBody } from \"./body-parser-middleware\";\nimport { checkFileSizeMiddleware } from \"./check-file-size-middleware\";\nimport { createCorsMiddleware } from \"./create-cors-middleware\";\n\n// TODO: figure out a way to set cors up for local dev automatically.\nexport function createServerFactory(\n  {\n    wsPaths,\n    enableBodyParser,\n    cors,\n    maxFileSize,\n  }: {\n    wsPaths?: string[];\n    enableBodyParser?: boolean;\n    cors?: CORSOptions;\n    /*\n    max file size in bytes, if passed in then the check file middleware will be passed in\n    to validate file sizes\n    */\n    maxFileSize?: number;\n  } = {\n    wsPaths: [],\n    enableBodyParser: true,\n  }\n) {\n  const routes: RouteMap = {};\n  let server: Server;\n  let middlewares: Middleware[] = [];\n\n  // cors must come first in the middleware\n  if (cors) {\n    middlewares.push(createCorsMiddleware(cors));\n  }\n\n  if (enableBodyParser) {\n    middlewares.push(bodyParserMiddleware);\n  }\n\n  if (maxFileSize) {\n    middlewares.push(checkFileSizeMiddleware(maxFileSize));\n  }\n\n  const middle = (middleware: Middleware) => {\n    middlewares.push(middleware);\n  };\n\n  const compose = (\n    middlewares: Middleware[],\n    handler: RouteHandler\n  ): RouteHandler => {\n    return (request: Request) => {\n      const invokeHandler: Middleware = (req, next) => handler(req);\n\n      const finalMiddleware = middlewares.reduceRight(\n        (nextMiddleware: Middleware, currentMiddleware: Middleware) => {\n          return (currentRequest: Request) => {\n            return currentMiddleware(currentRequest, () =>\n              nextMiddleware(currentRequest, () => handler(request))\n            );\n          };\n        },\n        invokeHandler\n      );\n\n      return finalMiddleware(request, () => handler(request));\n    };\n  };\n\n  const handleError = (\n    err: Error,\n    errorMessage: string,\n    onErrorHandler?: (\n      error: Error,\n      request: Request\n    ) => Response | Promise<Response>,\n    request?: Request\n  ) => {\n    if (onErrorHandler) {\n      return onErrorHandler(err, request!);\n    }\n    console.error(\"Error processing request:\", err);\n    return new Response(errorMessage || \"Internal Server Error\", {\n      status: 500,\n    });\n  };\n\n  const route = <\n    RequestGeneric extends BaseRouteRequestType = BaseRouteRequestType,\n    ResponseGeneric extends ResponseBodyTypes = ResponseBodyTypes\n  >(\n    routePath: string,\n    options: RouteOptions = {}\n  ) => {\n    const { errorMessage, onError } = options;\n    const defaultErrorMessage = \"Internal Server Error\";\n\n    const onRequest = (\n      handler: (args: {\n        request: Request;\n        getBody: <\n          BodyType extends RequestGeneric[\"body\"]\n        >() => Promise<BodyType>;\n        parseQueryParams: <ParamsType>() => ParamsType;\n        parseHeaders: <HeadersType>() => HeadersType;\n        // a function that allows you to pass in an object and it will stringify it if it's an object,\n        // otherwise it will return whatever else is passed in\n\n        jsonRes: <JSONBodyGeneric extends ResponseGeneric>(\n          body: JSONBodyGeneric,\n          options?: ResponseInit\n        ) => Response;\n        htmlRes: (body: string, options?: ResponseInit) => Response;\n      }) => Promise<Response>\n    ) => {\n      routes[routePath] = compose(middlewares, async (request: Request) => {\n        try {\n          const parseQueryParams = <\n            ParamsType = RequestGeneric[\"params\"]\n          >() => {\n            const url = new URL(request.url);\n            return url.searchParams as ParamsType;\n          };\n\n          const parseHeaders = <HeadersType = RequestGeneric[\"headers\"]>() => {\n            return request.headers as HeadersType;\n          };\n\n          const getBody = async <BodyType = RequestGeneric[\"body\"]>() => {\n            return await getParsedBody<BodyType>(request);\n          };\n\n          const jsonRes = (\n            body: ResponseGeneric,\n            options?: ResponseInit\n          ): Response => {\n            if (typeof body === \"object\") {\n              return new Response(JSON.stringify(body), {\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  ...options?.headers,\n                },\n                ...options,\n              });\n            }\n            return new Response(body, options);\n          };\n          const htmlRes = (body: string, options?: ResponseInit) => {\n            return new Response(body, {\n              headers: {\n                \"Content-Type\": \"text/html\",\n                ...options?.headers,\n              },\n              ...options,\n            });\n          };\n\n          return await handler({\n            request,\n            getBody,\n            parseQueryParams,\n            parseHeaders,\n            jsonRes,\n            htmlRes,\n          });\n        } catch (error) {\n          if (error instanceof Error) {\n            return handleError(\n              error,\n              errorMessage || defaultErrorMessage,\n              onError,\n              request\n            );\n          } else {\n            console.error(\"Caught a non-Error exception:\", error);\n            return new Response(errorMessage || defaultErrorMessage, {\n              status: 500,\n            });\n          }\n        }\n      });\n    };\n\n    return {\n      onRequest,\n    };\n  };\n\n  const fetch = (\n    request: Request\n  ): undefined | Response | Promise<Response> => {\n    const url = new URL(request.url);\n    if (wsPaths?.includes(url.pathname)) {\n      const success = server.upgrade(request);\n      return success\n        ? undefined\n        : new Response(\"WebSocket upgrade error\", { status: 400 });\n    }\n\n    const handler = routes[url.pathname];\n\n    if (handler) {\n      try {\n        return handler(request);\n      } catch (error) {\n        console.error(\"Error processing request:\", error);\n        return new Response(\"Internal Server Error\", { status: 500 });\n      }\n    } else {\n      return new Response(\"404: Not Found\", { status: 404 });\n    }\n  };\n\n  const start = (\n    { port, hostname = \"0.0.0.0\", websocket, verbose }: StartServerOptions = {\n      hostname: \"0.0.0.0\",\n      port: 3000,\n      websocket: {\n        message: () => {\n          console.log(\"websocket msg\");\n        },\n      },\n      verbose: false,\n    }\n  ) => {\n    try {\n      if (verbose) console.log(`Starting server on port ${port}...`);\n\n      server = Bun.serve({\n        fetch,\n        port,\n        hostname,\n        websocket: websocket || {\n          message: () => {\n            console.log(\"msg\");\n          },\n        },\n      });\n\n      if (verbose)\n        console.log(\n          `Server started on port ${port}, press Ctrl+C to stop, http://${hostname}:${port}`\n        );\n\n      return server;\n    } catch (error) {\n      if (verbose) console.error(\"Error starting server:\", error);\n      throw error;\n    }\n  };\n\n  return {\n    middle,\n    route,\n    start,\n  };\n}\n"],
  "mappings": "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",
  "names": ["response", "middlewares", "options"]
}
