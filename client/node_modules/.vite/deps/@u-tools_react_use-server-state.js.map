{
  "version": 3,
  "sources": ["../../@u-tools/core/modules/server-factory/create-state-dispatchers.ts", "../../@u-tools/react/use-server-state.ts"],
  "sourcesContent": ["import type { Dispatchers } from \"./create-web-socket-state-machine\";\n\nfunction isArrayType<T>(input: T | any[]): input is any[] {\n  return Array.isArray(input);\n}\n\nfunction isObjectType(input: any): input is object {\n  return typeof input === \"object\" && input !== null && !Array.isArray(input);\n}\n\nfunction isNumberType(input: any): input is number {\n  return typeof input === \"number\";\n}\n\nfunction createArrayDispatchers<Key, T, Options extends object = {}>(\n  key: Key,\n  state: T[],\n  updateFunction: (key: Key, value: T[], opts?: Options) => void\n) {\n  return {\n    set: (value: T[], opts?: Options) => {\n      updateFunction(key, value, opts);\n    },\n    push: (value: T, opts?: Options) => {\n      const existingState = state || [];\n      const newArr = [...existingState, value];\n      updateFunction(key, newArr, opts);\n    },\n    pop: (opts?: Options) => {\n      const newArr = state.slice(0, -1);\n      updateFunction(key, newArr, opts);\n    },\n    insert: (index: number, value: T, opts?: Options) => {\n      const newArr = [...state];\n      newArr.splice(index, 0, value);\n      updateFunction(key, newArr, opts);\n    },\n  };\n}\n\nfunction isBooleanType(input: any): input is boolean {\n  return typeof input === \"boolean\";\n}\n\nfunction createBooleanDispatchers<Key, Options extends object = {}>(\n  key: Key,\n  state: boolean,\n  updateFunction: (key: Key, value: any, opts?: Options) => void\n) {\n  return {\n    set: (value: boolean, opts?: Options) => {\n      updateFunction(key, value, opts);\n    },\n    toggle: (opts?: Options) => {\n      updateFunction(key, !state, opts);\n    },\n  };\n}\n\nfunction createObjectDispatchers<Key, T, Options extends object = {}>(\n  key: Key,\n  state: T,\n  updateFunction: (key: Key, value: any, opts?: Options) => void\n) {\n  return {\n    set: (value: T, opts?: Options) => {\n      updateFunction(key, value, opts);\n    },\n    update: (value: Partial<T>, opts?: Options) => {\n      const newValue = { ...state, ...value };\n      updateFunction(key, newValue, opts);\n    },\n  };\n}\n\nfunction createNumberDispatchers<Key, Options extends object = {}>(\n  key: Key,\n  state: number,\n  updateFunction: (key: Key, value: any, opts?: Options) => void\n) {\n  return {\n    set: (value: number, opts?: Options) => {\n      updateFunction(key, value, opts);\n    },\n    increment: (amount: number = 1, opts?: Options) => {\n      updateFunction(key, state + amount, opts);\n    },\n    decrement: (amount: number = 1, opts?: Options) => {\n      updateFunction(key, state - amount, opts);\n    },\n  };\n}\n\nfunction createDefaultDispatchers<Key, T, Options extends object = {}>(\n  key: Key,\n  updateFunction: (key: Key, value: any, opts?: Options) => void\n) {\n  return {\n    set: (value: T, opts?: Options) => {\n      updateFunction(key, value, opts);\n    },\n  };\n}\n\nfunction mergeWithDefault<State extends object>(\n  defaultState: State,\n  state: State\n): State {\n  const mergedState: Partial<State> = {};\n  const missingKeys: (keyof State)[] = [];\n\n  for (const key in defaultState) {\n    if (key in state) {\n      mergedState[key] = state[key];\n    } else {\n      mergedState[key] = defaultState[key];\n      missingKeys.push(key);\n    }\n  }\n\n  // Log missing keys\n  if (missingKeys.length > 0) {\n    console.info(\"Missing keys from state:\", missingKeys.join(\", \"));\n  }\n\n  return mergedState as State;\n}\n\nexport function createStateDispatchers<\n  State extends object,\n  UpdateFnOpts extends object = {}\n>({\n  defaultState,\n  state,\n  updateFunction,\n}: {\n  state: State;\n  defaultState: State;\n  updateFunction: (key: keyof State, value: any, opts?: UpdateFnOpts) => void;\n}): Dispatchers<State, UpdateFnOpts> {\n  const mergedState = mergeWithDefault(defaultState, state);\n\n  return (Object.keys(mergedState) as (keyof State)[]).reduce((acc, key) => {\n    const k = key as keyof State;\n    const currentValue = mergedState[k];\n\n    if (isArrayType(currentValue)) {\n      acc[k] = createArrayDispatchers(k, currentValue, updateFunction) as any;\n    } else if (isObjectType(currentValue)) {\n      acc[k] = createObjectDispatchers(k, currentValue, updateFunction) as any;\n    } else if (isNumberType(currentValue)) {\n      acc[k] = createNumberDispatchers(k, currentValue, updateFunction) as any;\n    } else if (isBooleanType(currentValue)) {\n      acc[k] = createBooleanDispatchers(k, currentValue, updateFunction) as any;\n    } else {\n      acc[k] = createDefaultDispatchers(k, updateFunction) as any;\n    }\n\n    return acc;\n  }, {} as Dispatchers<State>);\n}\n", "import { createStateDispatchers } from \"@u-tools/core/modules/server-factory/create-state-dispatchers\";\nimport { Dispatchers } from \"@u-tools/core/modules/server-factory/create-web-socket-state-machine\";\nimport { useEffect, useRef, useState } from \"react\";\n\nconst MAX_RETRIES = 5;\n\nconst getAppStateFromLocalStorage = <State extends object>(\n  defaultState: State\n): State => {\n  const appStateString = localStorage.getItem(\"appState\");\n\n  try {\n    const storedState = appStateString ? JSON.parse(appStateString) : {};\n    // Merge the default state with the stored state.\n    // This will ensure that missing keys in storedState will be taken from defaultState.\n    return { ...defaultState, ...storedState };\n  } catch (error) {\n    return defaultState;\n  }\n};\n\ntype OptimisticMap<State> = Partial<Record<keyof State, boolean>>;\n\nexport type DefaultOptions = {\n  optimistic?: boolean;\n};\n\nexport function useServerState<\n  State extends object,\n  Options extends DefaultOptions = {}\n>({\n  defaultState,\n  url,\n  optimisticMap,\n}: {\n  url: string;\n  defaultState: State;\n  optimisticMap?: OptimisticMap<State>;\n}): {\n  state: State;\n  control: Dispatchers<State, Options>;\n  dispatch: (\n    key: keyof State,\n    value: State[keyof State],\n    opts?: Options\n  ) => void;\n} {\n  const [state, setState] = useState<State>(() =>\n    getAppStateFromLocalStorage(defaultState)\n  );\n  const wsRef = useRef<WebSocket | null>(null);\n  const initialized = useRef(false);\n  const prevStateRef = useRef<State | null>(null);\n  const retryCount = useRef(0);\n\n  useEffect(() => {\n    const connectToServer = () => {\n      const websocket = new WebSocket(url);\n      wsRef.current = websocket;\n\n      websocket.onopen = () => {\n        retryCount.current = 0;\n      };\n\n      websocket.onmessage = (event) => {\n        if (typeof event.data !== \"string\") return;\n        const receivedData = JSON.parse(event.data);\n\n        if (receivedData.status === \"failure\" && prevStateRef.current) {\n          setState(prevStateRef.current);\n        } else if (receivedData.key && \"value\" in receivedData) {\n          setState((prevState) => ({\n            ...prevState,\n            [receivedData.key]: receivedData.value,\n          }));\n        }\n      };\n\n      websocket.onclose = (event) => {\n        // Check if the WebSocket was closed unexpectedly and we haven't exceeded max retries\n        if (event.code !== 1000 && retryCount.current < MAX_RETRIES) {\n          retryCount.current += 1;\n          const delay = Math.min(1000 * retryCount.current, 30000);\n          setTimeout(connectToServer, delay);\n        } else {\n          retryCount.current = 0; // Reset retry count if we've reached max retries or if closure was normal\n        }\n      };\n\n      return () => {\n        websocket?.close?.();\n      };\n    };\n\n    connectToServer();\n\n    // Clean up function\n    return () => {\n      wsRef.current?.close();\n    };\n  }, [url]);\n\n  useEffect(() => {\n    const storedState = getAppStateFromLocalStorage<State>(defaultState);\n\n    if (!initialized.current) {\n      setState(storedState);\n      initialized.current = true;\n      return;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (initialized.current) {\n      localStorage.setItem(\"appState\", JSON.stringify(state));\n    }\n  }, [state]);\n\n  const sendToServer = (key: keyof State, value: State[keyof State]) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({ key, value }));\n    }\n  };\n\n  const dispatch = (\n    key: keyof State,\n    value: State[keyof State],\n    opts?: Options\n  ) => {\n    const isOptimistic = opts?.optimistic ?? optimisticMap?.[key] !== false;\n\n    if (isOptimistic) {\n      prevStateRef.current = state;\n      setState((prev) => ({ ...prev, [key]: value }));\n    }\n\n    sendToServer(key, value);\n  };\n\n  const control = createStateDispatchers<State, Options>({\n    defaultState,\n    state,\n    updateFunction: dispatch,\n  });\n\n  return {\n    state,\n    control,\n    dispatch,\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
